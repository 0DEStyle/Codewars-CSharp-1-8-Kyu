/*Challenge link: https://www.codewars.com/kata/55f8a9c06c018a0d6e000132/train/csharp
Question:
ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits.

If the function is passed a valid PIN string, return true, else return false.

Examples (Input --> Output)
"1234"   -->  true
"12345"  -->  false
"a234"   -->  false


/*

//***************Solution********************
using System.Linq;

//Check whether each character is digit in the string 'pin', then check wheter the string length is 6 or 4.
//if all conditions met, return true, else false.
//Then simiplfied into one line by using an Enumerable methods.
public class Kata
{
  public static bool ValidatePin(string pin) => pin.All(char.IsDigit) && (pin.Length == 6 || pin.Length == 4) ? true : false;
}









//****************Sample Test*****************

namespace Solution 
{
  using NUnit.Framework;
  using System;
  using System.Collections.Generic;
  using System.Linq;

  [TestFixture]
  public class FixedTest
  {
    [Test, Description("ValidatePin should return false for pins with length other than 4 or 6")]
    public void LengthTest()
    {
      Assert.AreEqual(false, Kata.ValidatePin("1"), "Wrong output for \"1\"");
      Assert.AreEqual(false, Kata.ValidatePin("12"), "Wrong output for \"12\"");
      Assert.AreEqual(false, Kata.ValidatePin("123"), "Wrong output for \"123\"");
      Assert.AreEqual(false, Kata.ValidatePin("12345"), "Wrong output for \"12345\"");
      Assert.AreEqual(false, Kata.ValidatePin("1234567"), "Wrong output for \"1234567\"");
      Assert.AreEqual(false, Kata.ValidatePin("-1234"), "Wrong output for \"-1234\"");
      Assert.AreEqual(false, Kata.ValidatePin("-12345"), "Wrong output for \"-12345\"");
      Assert.AreEqual(false, Kata.ValidatePin("1.234"), "Wrong output for \"1.234\"");
      Assert.AreEqual(false, Kata.ValidatePin("-1.234"), "Wrong output for \"-1.234\"");
      Assert.AreEqual(false, Kata.ValidatePin("00000000"), "Wrong output for \"00000000\"");
    }
    
    [Test, Description("ValidatePin should return false for pins which contain characters other than digits")]
    public void NonDigitTest()
    {
      Assert.AreEqual(false, Kata.ValidatePin("a234"), "Wrong output for \"a234\"");
      Assert.AreEqual(false, Kata.ValidatePin(".234"), "Wrong output for \".234\"");
    }
    
    [Test, Description("ValidatePin should return true for valid pins")]
    public void ValidTest()
    {
      Assert.AreEqual(true, Kata.ValidatePin("1234"), "Wrong output for \"1234\"");
      Assert.AreEqual(true, Kata.ValidatePin("0000"), "Wrong output for \"0000\"");
      Assert.AreEqual(true, Kata.ValidatePin("1111"), "Wrong output for \"1111\"");
      Assert.AreEqual(true, Kata.ValidatePin("123456"), "Wrong output for \"123456\"");
      Assert.AreEqual(true, Kata.ValidatePin("098765"), "Wrong output for \"098765\"");
      Assert.AreEqual(true, Kata.ValidatePin("000000"), "Wrong output for \"000000\"");
      Assert.AreEqual(true, Kata.ValidatePin("090909"), "Wrong output for \"090909\"");
    }
    
    [Test, Description("ValidatePin should return false in various edge cases")]
    public void EdgeCaseTest()
    {
      foreach (string s in edgeCaseStrings)
        Assert.AreEqual(false, Kata.ValidatePin(s), String.Format("Wrong output for \"{0}\"", s));
    }
    static readonly string[] edgeCaseStrings = new string[]{
      "",
      "123",
      "12345",
      "1234567",
      "1234567890",
      "1234x",
      "123456x",
      "12.0",
      "1234.0",
      "123456.0",
      "123\n",
      "1234\n",
      "09876\n",
      "098765\n",
      "-111",
      "111-",
      "-44444",
      "44444-",
      "+111",
      "+88888",
      "+1111",
      "-2018",
      "+234567",
      "-234567",
      "123/",
      "456:",
      "9¾9¾",
    };
  }
  
  [TestFixture]
  public class RandomTest
  { 
    private static Random rnd = new Random();
    
    private static string digits = "0123456789";
    
    private static bool solution(string pin) => (pin.Length == 4 || pin.Length == 6) && pin.All(Char.IsDigit);
    
    private static IEnumerable<TestCaseData> randomTestCases
    {
      get
      {
        const int Tests = 100;
        
        for (int i = 0; i < Tests; ++i)
        {
          List<char> validPin = new char[rnd.Next(2, 4) * 2].Select(_ => digits[rnd.Next(0, digits.Length)]).ToList();
          if (rnd.Next(0, 2) == 0) { validPin[rnd.Next(0, validPin.Count)] = (char)rnd.Next(32, 127); }
          string pin = String.Concat(validPin);
          
          bool expected = solution(pin);
          
          yield return new TestCaseData(pin).Returns(expected).SetDescription($"{pin} should be {(expected ? "valid" : "invalid")}");
        }
      }
    }
    
    [Test, TestCaseSource("randomTestCases")]
    public bool RandomTests(string pin) => Kata.ValidatePin(pin);
  }
}
