/*Challenge link: https://www.codewars.com/kata/550498447451fbbd7600041c/train/csharp
Question:
Given two arrays a and b write a function comp(a, b) (orcompSame(a, b)) that checks whether the two arrays have the "same" elements, with the same multiplicities (the multiplicity of a member is the number of times it appears). "Same" means, here, that the elements in b are the elements in a squared, regardless of the order.

Examples
Valid arrays
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]
comp(a, b) returns true because in b 121 is the square of 11, 14641 is the square of 121, 20736 the square of 144, 361 the square of 19, 25921 the square of 161, and so on. It gets obvious if we write b's elements in terms of squares:

a = [121, 144, 19, 161, 19, 144, 19, 11] 
b = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]
Invalid arrays
If, for example, we change the first number to something else, comp is not returning true anymore:

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [132, 14641, 20736, 361, 25921, 361, 20736, 361]
comp(a,b) returns false because in b 132 is not the square of any number of a.

a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 36100, 25921, 361, 20736, 361]
comp(a,b) returns false because in b 36100 is not the square of any number of a.

Remarks
a or b might be [] or {} (all languages except R, Shell).
a or b might be nil or null or None or nothing (except in C++, COBOL, Crystal, D, Dart, Elixir, Fortran, F#, Haskell, Nim, OCaml, Pascal, Perl, PowerShell, Prolog, PureScript, R, Racket, Rust, Shell, Swift).
If a or b are nil (or null or None, depending on the language), the problem doesn't make sense so return false.

Note for C
The two arrays have the same size (> 0) given as parameter in function comp.

/*

//***************Solution********************
using System.Linq;
using System;
class AreTheySame
{
  public static bool comp(int[] a, int[] b) 
    {
    //Test 4
    if(a == null || b == null)
      return false;
    //Test 3 
    if(a.Length  == 0 || b.Length  == 0){
      //Test 5
      if(a.Length == b.Length)
        {
        return true;
      }
      //Test case to pinpoint the error since nothing was shown on the log.
      /*
      Console.WriteLine("a Length is "+ a.Length + ", b Length is " + b.Length);
      if(a== null ){
        Console.WriteLine("a is null");
      }
      if(b== null ){
        Console.WriteLine("b is null");
      }
      //Console.WriteLine(string.Join(" ", b));
      */
      return false;
      }
    Array.Sort(a);
    Array.Sort(b);
    
    for (int i = 0; i < b.Length; i++)
    {
    if(Math.Sqrt(b[i])!= a[i])
        return false;
    }
    return true;
    }
}


//****************Sample Test*****************

using System;
using NUnit.Framework;

[TestFixture]
public class AreTheySameTests {

[Test]
  public void Test1() {
    int[] a = new int[] {121, 144, 19, 161, 19, 144, 19, 11};
    int[] b = new int[] {11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19};
    bool r = AreTheySame.comp(a, b); // True
   Assert.AreEqual(true, r);
  }
[Test]
  public void Test1a() {
    int[] a = new int[] {2, 2, 3};
    int[] b = new int[] {4, 9, 9};
    bool r = AreTheySame.comp(a, b); // false
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test2a() {
    int[] a = new int[] {4, 4};
    int[] b = new int[] {1, 31};
    bool r = AreTheySame.comp(a, b); // false
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test2() {
    int[] a = new int[] {121, 144, 19, 161, 19, 144, 19, 11};
    int[] b = new int[] { 11 * 11, 121 * 121, 144 * 144, 190 * 190, 161 * 161, 19 * 19, 144 * 144, 19 * 19 };
    bool r = AreTheySame.comp(a, b); // False
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test3() {
    int[] a = new int[0];
    int[] b = new int[] {1};
    bool r = AreTheySame.comp(a, b); // False
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test4() {
    int[] a = new int[0];
    int[] b = null;
    bool r = AreTheySame.comp(a, b); // False
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test5() {
    int[] a = new int[0];
    int[] b = new int[0];
    bool r = AreTheySame.comp(a, b); // True
   Assert.AreEqual(true, r);
  }
[Test]
  public void Test6() {
    int[] a = new int[] { 121, 144, 19, 161, 19, 144, 19, 11, 1008 };
    int[] b = new int[] { 11 * 11, 121 * 121, 144 * 144, 190 * 190, 161 * 161, 19 * 19, 144 * 144, 19 * 19 };
    bool r = AreTheySame.comp(a, b); // False
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test7() {
    int[] a = new int[] { 121, 1440, 191, 161, 19, 144, 195, 11 };
    int[] b = new int[] {  11 * 11, 121 * 121, 1440 * 1440, 191 * 191, 161 * 161, 19 * 19, 144 * 144, 195 * 195  };
    bool r = AreTheySame.comp(a, b); // True
   Assert.AreEqual(true, r);
  }
[Test]
  public void Test8() {
    int[] a = new int[] {  0, 14, 191, 161, 19, 144, 195, 1  };
    int[] b = new int[] {  1, 0, 14 * 14, 191 * 191, 161 * 161, 19 * 19, 144 * 144, 195 * 195  };
    bool r = AreTheySame.comp(a, b); // True
   Assert.AreEqual(true, r);
  }
[Test]
  public void Test9() {
    int[] a = new int[] {  0, 14, 191, 161, 19, 144, 195, 1, 2  };
    int[] b = new int[] {  1, 0, 14 * 14, 191 * 191, 161 * 161, 19 * 19, 144 * 144, 195 * 195, 3  };
    bool r = AreTheySame.comp(a, b); // True
   Assert.AreEqual(false, r);
  }
[Test]
  public void Test1b() {
    int[] a = new int[] {2, 2, 3};
    int[] b = new int[] {4, 4, 9};
    bool r = AreTheySame.comp(a, b); // false
   Assert.AreEqual(true, r);
  }
  [Test]
  public void Test2b() {
    int[] a = new int[] {3, 4};
    int[] b = new int[] {0, 25};
    bool r = AreTheySame.comp(a, b); // false
   Assert.AreEqual(false, r);
  }
}
