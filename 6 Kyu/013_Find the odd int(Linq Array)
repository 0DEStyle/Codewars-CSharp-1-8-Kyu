/*Challenge link:https://www.codewars.com/kata/54da5a58ea159efa38000836/train/csharp
Question:
Given an array of integers, find the one that appears an odd number of times.

There will always be only one integer that appears an odd number of times.

Examples
[7] should return 7, because it occurs 1 time (which is odd).
[0] should return 0, because it occurs 1 time (which is odd).
[1,1,2] should return 2, because it occurs 1 time (which is odd).
[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
[1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd).

/*

//***************Solution********************

//for each element x in seq, for each element y in seq,
//start counting if y is equal to x, if the count of element x modulus of 2 is 1(odd)
//return the first element
//Then simiplfied into an Enumerable methods.


using System.Linq;
namespace Solution
{
  class Kata
    {
    public static int find_it(int[] seq) =>
      seq.First(x => seq.Count(y => y == x) % 2 == 1);
    }
}

//****************Sample Test*****************
namespace Solution {
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class SolutionTest
  {
    [Test]
    public void Tests()
    {
      Assert.AreEqual(5 , Kata.find_it ( new[] { 20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5 }) );
      Assert.AreEqual(-1 , Kata.find_it(new[] { 1,1,2,-2,5,2,4,4,-1,-2,5 }) );
      Assert.AreEqual(5 , Kata.find_it(new[] { 20,1,1,2,2,3,3,5,5,4,20,4,5 }) );
      Assert.AreEqual(10 , Kata.find_it(new[] { 10 }) );
      Assert.AreEqual(10 , Kata.find_it(new[] { 1,1,1,1,1,1,10,1,1,1,1 }) );
      Assert.AreEqual(1 , Kata.find_it(new[] { 5,4,3,2,1,5,4,3,2,10,10 }) );
    }
  }
}
