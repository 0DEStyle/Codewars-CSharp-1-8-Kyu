/*Challenge link:https://www.codewars.com/kata/56a5d994ac971f1ac500003e/train/csharp
Question:
You are given an array(list) strarr of strings and an integer k. Your task is to return the first longest string consisting of k consecutive strings taken in the array.

Examples:
strarr = ["tree", "foling", "trashy", "blue", "abcdef", "uvwxyz"], k = 2

Concatenate the consecutive strings of strarr by 2, we get:

treefoling   (length 10)  concatenation of strarr[0] and strarr[1]
folingtrashy ("      12)  concatenation of strarr[1] and strarr[2]
trashyblue   ("      10)  concatenation of strarr[2] and strarr[3]
blueabcdef   ("      10)  concatenation of strarr[3] and strarr[4]
abcdefuvwxyz ("      12)  concatenation of strarr[4] and strarr[5]

Two strings are the longest: "folingtrashy" and "abcdefuvwxyz".
The first that came is "folingtrashy" so 
longest_consec(strarr, 2) should return "folingtrashy".

In the same way:
longest_consec(["zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail"], 2) --> "abigailtheta"
n being the length of the string array, if n = 0 or k > n or k <= 0 return "" (return Nothing in Elm, "nothing" in Erlang).

Note
consecutive strings : follow one after another without an interruption

/*

//***************Solution********************
using System;
public class LongestConsecutives 
{
    
    public static string LongestConsec(string[] strarr, int k) {
      int n = 0;// n is the length of string because the question say so.
      string text = "", longestText = "";
      
      //make sure the array doesn't go out of range
      for (int i = 0; i < strarr.Length-k+1; i++){
        //reset text for new concatenation
        text = "";
        
        //concatenate the string
        for(int j = i; j < i + k; j++){
          text += strarr[j];
        }
        
        //set the length of current text as n 
        n = text.Length;
        //Log: Console.WriteLine(text);
        
        //compare length between n and longest text.
      if (n > longestText.Length){
        longestText = text;
        //Log: Console.WriteLine("Longest text is " + longestText);
      }
      }
      
      //Conditions for returning result
      if (n == 0 || k > n || k <= 0)
          return "";
      return longestText;
    }
}

//****************Sample Test*****************
using System;
using System.Linq;
using System.Collections.Generic;
using NUnit.Framework;

[TestFixture]
public static class LongestConsecutivesTests 
{
    private static void testing(string actual, string expected) 
    {
        Assert.AreEqual(expected, actual);
    }
[Test]
    public static void test1() 
    {        
        Console.WriteLine("Basic Tests");
        testing(LongestConsecutives.LongestConsec(new String[] {"zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail"}, 2), "abigailtheta");
        testing(LongestConsecutives.LongestConsec(new String[] {"ejjjjmmtthh", "zxxuueeg", "aanlljrrrxx", "dqqqaaabbb", "oocccffuucccjjjkkkjyyyeehh"}, 1), "oocccffuucccjjjkkkjyyyeehh");
        testing(LongestConsecutives.LongestConsec(new String[] {}, 3), "");
        testing(LongestConsecutives.LongestConsec(new String[] {"itvayloxrp","wkppqsztdkmvcuwvereiupccauycnjutlv","vweqilsfytihvrzlaodfixoyxvyuyvgpck"}, 2), "wkppqsztdkmvcuwvereiupccauycnjutlvvweqilsfytihvrzlaodfixoyxvyuyvgpck");
        testing(LongestConsecutives.LongestConsec(new String[] {"wlwsasphmxx","owiaxujylentrklctozmymu","wpgozvxxiu"}, 2), "wlwsasphmxxowiaxujylentrklctozmymu");
        testing(LongestConsecutives.LongestConsec(new String[] {"zone", "abigail", "theta", "form", "libe", "zas"}, -2), "");
        testing(LongestConsecutives.LongestConsec(new String[] {"it","wkppv","ixoyx", "3452", "zzzzzzzzzzzz"}, 3), "ixoyx3452zzzzzzzzzzzz");
        testing(LongestConsecutives.LongestConsec(new String[] {"it","wkppv","ixoyx", "3452", "zzzzzzzzzzzz"}, 15), "");
        testing(LongestConsecutives.LongestConsec(new String[] {"it","wkppv","ixoyx", "3452", "zzzzzzzzzzzz"}, 0), "");
    }

    //-----------------------        
    private static String LongestConsecSol(string[] strarr, int k) 
    {
        int n = strarr.Length;
        if ((n == 0) || (k > n) || (k <= 0)) return "";
        int[] arr = strarr.Select(w => w.Length).ToArray();
        int sm = 0;
        for (int i = 0; i < k; i++) sm += arr[i];
        int mx_sm = sm, mx_nd = k - 1;
        for (int u = k; u < n; u++) 
        {
            sm = sm + arr[u] - arr[u - k];
            if (sm > mx_sm) {
                mx_sm = sm; mx_nd = u;
            }
        }
        int start =  mx_nd - k + 1;
        string[] sl = new List<string>(strarr).GetRange(start, k).ToArray();
        return String.Join("", sl);
    }
    private static string[] DoEx(int k) {
        int j = 0;
        string[] a1 = new string[k];
        while (j < k) {
            string res = "";
            int n = -1;
            for (int i = 0; i < rnd.Next(3, 10) ; i++) {
                n = rnd.Next(97, 122); 
                for (int u = 0; u < rnd.Next(1, 3); u++)
                    res += (char)n;
            }
            a1[j] = res;
            j++;
        }
        return a1;
    }
    //-----------------------
    private static Random rnd = new Random();
[Test]    
    public static void RandomTest1() 
    {
        Console.WriteLine("200 Random Tests");
        for (int i = 0; i < 200; i++) 
        {
            String[] s1 = DoEx(rnd.Next(100, 200));
            int n = rnd.Next(1, s1.Length + 2);
            testing(LongestConsecutives.LongestConsec(s1, n), LongestConsecSol(s1, n));
        }
    }
}
