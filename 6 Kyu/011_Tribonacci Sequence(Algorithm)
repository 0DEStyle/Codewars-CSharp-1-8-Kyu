/*Challenge link:https://www.codewars.com/kata/556deca17c58da83c00002db/train/csharp
Question:
Well met with Fibonacci bigger brother, AKA Tribonacci.

As the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(

So, if we are to start our Tribonacci sequence with [1, 1, 1] as a starting input (AKA signature), we have this sequence:

[1, 1 ,1, 3, 5, 9, 17, 31, ...]
But what if we started with [0, 0, 1] as a signature? As starting with [0, 1] instead of [1, 1] basically shifts the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:

[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]
Well, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a signature array/list, returns the first n elements - signature included of the so seeded sequence.

Signature will always contain 3 numbers; n will always be a non-negative number; if n == 0, then return an empty array (except in C return NULL) and be ready for anything else which is not clearly specified ;)

If you enjoyed this kata more advanced and generalized version of it can be found in the Xbonacci kata

[Personal thanks to Professor Jim Fowler on Coursera for his awesome classes that I really recommend to any math enthusiast and for showing me this mathematical curiosity too with his usual contagious passion :)]



/*

//***************Solution********************
using System;
using System.Collections.Generic;
using System.Linq;

public class Xbonacci
{
  public double[] Tribonacci(double[] signature, int n){
    //check if n is 0 then return an empty array
    if(n == 0){
      double[] emptyArray = new double[]{ };
      return emptyArray;
      //better way return new double[] { 0 };
    }
    
    //if n is less than 3, then result the n number of elements instead
    List<double> noResult = new List<double>();
    if(n <= 3){
      for(int i = 0; i < n; i++){
        noResult.Add(signature[i]);
      }
      return noResult.ToArray();
    }
    //better way return signature[i];
    
    //Making a list because array can't add more elements
    List<double> tempList = new List<double>();
    tempList = signature.ToList();
    
    //subtract n by 3 because first 3 don't count
    for (int i = 0; i < n-3; i++){
    tempList.Add(tempList[i] + tempList[i + 1] + tempList[i + 2]);
    //Log checking
    //Console.WriteLine(String.Join(" ", tempList).ToArray());
    }
    return tempList.ToArray();
  }
}


//****************Sample Test*****************

using NUnit.Framework;
using System;

[TestFixture]
public class XbonacciTest
{
  private Xbonacci variabonacci;
  
  [SetUp]
  public void SetUp() 
  {
    variabonacci = new Xbonacci();
  }

  [TearDown]
  public void TearDown()
  {
    variabonacci = null;
  }

  [Test]
  public void BasicTests()
  {
    Assert.AreEqual(new double []{1,1,1,3,5,9,17,31,57,105}, variabonacci.Tribonacci(new double []{1,1,1},10));
    Assert.AreEqual(new double []{0,0,1,1,2,4,7,13,24,44}, variabonacci.Tribonacci(new double []{0,0,1},10));
    Assert.AreEqual(new double []{0,1,1,2,4,7,13,24,44,81}, variabonacci.Tribonacci(new double []{0,1,1},10));
    Assert.AreEqual(new double []{1,0,0,1,1,2,4,7,13,24}, variabonacci.Tribonacci(new double []{1,0,0},10));
    Assert.AreEqual(new double []{0,0,0,0,0,0,0,0,0,0}, variabonacci.Tribonacci(new double []{0,0,0},10));
    Assert.AreEqual(new double []{1,2,3,6,11,20,37,68,125,230}, variabonacci.Tribonacci(new double []{1,2,3},10));
    Assert.AreEqual(new double []{3,2,1,6,9,16,31,56,103,190}, variabonacci.Tribonacci(new double []{3,2,1},10));
    Assert.AreEqual(new double []{1}, variabonacci.Tribonacci(new double []{1,1,1},1));
    Assert.AreEqual(new double []{}, variabonacci.Tribonacci(new double []{300,200,100},0));
    Assert.AreEqual(new double []{0.5,0.5,0.5,1.5,2.5,4.5,8.5,15.5,28.5,52.5,96.5,177.5,326.5,600.5,1104.5,2031.5,3736.5,6872.5,12640.5,23249.5,42762.5,78652.5,144664.5,266079.5,489396.5,900140.5,1655616.5,3045153.5,5600910.5,10301680.5}, variabonacci.Tribonacci(new double []{0.5,0.5,0.5},30));
  }

  [Test]
  public void RandomTests()
  {
    double[] sign;
    int n;
    Random r = new Random();
    for(int i = 0; i < 40; i++) {
        sign = new double[]{r.Next(0, 20), r.Next(0, 20), r.Next(0, 20)};
        n = r.Next(0, 50);

        Console.WriteLine("Testing for signature: " + string.Join(", ", sign) + " and n: " + n);
        Assert.AreEqual(Soluzionacci(sign, n), variabonacci.Tribonacci(sign, n), "It should work with random inputs too");        
    }
  }

  private double[] Soluzionacci(double[] s, int n)
  {
    double[] res = new double[n];
    Array.Copy(s, res, Math.Min(3, n));
    
    for(int i = 3; i < n; i++)
      res[i] = res[i - 3] + res[i - 2] + res[i - 1];
    
    return n == 0 ? new double[]{} : res;
  }
}
