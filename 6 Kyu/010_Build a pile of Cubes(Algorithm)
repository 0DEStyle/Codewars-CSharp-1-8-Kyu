/*Challenge link:https://www.codewars.com/kata/5592e3bd57b64d00f3000047/train/csharp
Question:
Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.

You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?

The parameter of the function findNb (find_nb, find-nb, findNb, ...) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + ... + 1^3 = m if such a n exists or -1 if there is no such n.

Examples:
findNb(1071225) --> 45

findNb(91716553919377) --> -1



/*

//***************Solution********************
//Algorithm 
//Total volume subtract the highest cube from the top,
//add 1 to i (to track the number of cube)
//then work your way downward, until volume become 0
//return i(number of cube) as the result
//if volume become less than 0, return -1

public class ASum {
	
	public static long findNb(long m) {
    long i = 0;

    while(m > 0){
    m = m - ((i + 1)* (i + 1)* (i + 1)); //Math.Pow is double
    //Test log Console.WriteLine("m is "+ m);
    i++;
    if(m < 0){
        //Test Log Console.WriteLine("cube is " + i);
        return -1;
      }
    }
    return i;
	}
}


//****************Sample Test*****************

using System;
using NUnit.Framework;

[TestFixture]
public class ASumTests {

[Test]
  public void Test1() {
    Assert.AreEqual(2022, ASum.findNb(4183059834009));
  }
[Test]
    public void Test2() {
        Assert.AreEqual(-1, ASum.findNb(24723578342962));
    }
[Test]
    public void Test3() {
        Assert.AreEqual(4824, ASum.findNb(135440716410000));
    }
[Test]
    public void Test4() {
        Assert.AreEqual(3568, ASum.findNb(40539911473216));
    }
[Test]
    public void Test5() {
        Assert.AreEqual(3218, ASum.findNb(26825883955641));
    }
[Test]
    public void Test6() {
        Assert.AreEqual(-1, ASum.findNb(41364076483082));
    }
[Test]
    public void Test7() {
        Assert.AreEqual(2485, ASum.findNb(9541025211025));
    }
[Test]
    public void Test8() {
        Assert.AreEqual(-1, ASum.findNb(112668204662785));
    }
[Test]
    public void Test9() {
        Assert.AreEqual(4788, ASum.findNb(131443152397956));
    }
[Test]
    public void Test10() {
        Assert.AreEqual(-1, ASum.findNb(108806345136785));
    }
[Test]
    public void Test11() {
        Assert.AreEqual(55100, ASum.findNb(2304422822859502500));
    }
[Test]
    public void Test12() {
        Assert.AreEqual(-1, ASum.findNb(2304422822859502501));
    }
[Test]
    public void Test14() {
        Assert.AreEqual(-1, ASum.findNb(4));
    }
[Test]
    public void Test15() {
        Assert.AreEqual(-1, ASum.findNb(16));
    }

    public static long solution(long m) {
      long limit = (long)(Math.Sqrt(2) * Math.Pow(m, 0.25 ) + 1);
      for (long i = 0; i <= limit; i++)
        if (i * i * (i + 1) * (i + 1) / 4 == m) return i;
      return (-1L);
  }
    
[Test]
    public static void rndTests() {
        Random rnd = new Random();
        for (int i = 0; i < 100; i++) {
            long r = rnd.Next(50000, 55000);
            long k = r * r * (r + 1) * (r + 1) / 4 + rnd.Next(0, 2);
            Console.WriteLine("Find n of : " + k);
            Assert.AreEqual(solution(k), ASum.findNb(k));
        }
    }
    
}
