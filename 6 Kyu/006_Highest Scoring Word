/*Challenge link:https://www.codewars.com/kata/57eb8fcdf670e99d9b000272/train/csharp
Question:
Given a string of words, you need to find the highest scoring word.

Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.

You need to return the highest scoring word as a string.

If two words score the same, return the word that appears earliest in the original string.

All letters will be lowercase and all inputs will be valid.




/*

//***************Solution********************
using System.Linq;

//Split the string "s" with ' '
//subtract the current element by initial ASCII value(a) then add 1
//Sort the order of the element by descending, and select the first one.
//Then simiplfied into one line by using an Enumerable methods.

public class Kata
{
  public static string High(string s) => s.Split(' ').OrderByDescending(a => a.Select(b => b - 'a'+ 1).Sum()).First();
}

//****************Sample Test*****************

namespace Solution 
{
  using NUnit.Framework;
  using System;
  using System.Collections.Generic;
  using System.Linq;

  [TestFixture]
  public class Sample_Tests
  {
    private static IEnumerable<TestCaseData> testCases
    {
      get
      {
        yield return new TestCaseData("man i need a taxi up to ubud").Returns("taxi");
        yield return new TestCaseData("what time are we climbing up to the volcano").Returns("volcano");
        yield return new TestCaseData("take me to semynak").Returns("semynak");
        yield return new TestCaseData("aa b").Returns("aa");
        yield return new TestCaseData("b aa").Returns("b");
        yield return new TestCaseData("bb d").Returns("bb");
        yield return new TestCaseData("d bb").Returns("d");
        yield return new TestCaseData("aaa b").Returns("aaa");
      }
    }
  
    [Test, TestCaseSource("testCases")]
    public string Test(string x) => Kata.High(x);
  }
  
  [TestFixture]
  public class Random_Tests
  {
    private static Random rnd = new Random();
    
    private static string solution(string s)
    { 
      // Split sentence into words
      string[] words = s.Split(' ');
      
      // Map words into score
      int[] scores = words.Select(w => w.Sum(c => (int)c - 96)).ToArray();
      int maxScore = scores.Max();
      
      // Return the word associated with the max score
      return words[Array.IndexOf(scores, maxScore)];
    }
    
    private static string chars = "      abcdefghijklmnopqrstuvwxyz";
    
    [Test, Description("Random Tests")]
    public void RandomTests()
    {
      const int Tests = 100;
      
      for (int i = 0; i < Tests; ++i)
      {
        string test = String.Join(" ", String.Concat(new char[rnd.Next(10, 200)].Select(_ => chars[rnd.Next(0, chars.Length)])).Split(' ').Where(s => !String.IsNullOrEmpty(s)));
        
        string expected = solution(test);
        string actual = Kata.High(test);
        
        Assert.AreEqual(expected, actual);
      }
    }
  }
}
