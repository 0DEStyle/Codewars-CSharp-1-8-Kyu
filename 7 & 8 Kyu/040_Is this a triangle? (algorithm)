/*Challenge link:https://www.codewars.com/kata/56606694ec01347ce800001b/train/csharp
Question:
Implement a function that accepts 3 integer values a, b, c. The function should return true if a triangle can be built with the sides of given length and false in any other case.

(In this case, all triangles must have surface greater than 0 to be accepted).

//more helpful description would be "how triangles can be built with 3 sides."

/*

//***************Solution********************
//The algorithm
//if a + b is greater than c
//and if a + c is greater than b
//and d + c is greater than a
//then this triangle can be built.
//return the result as bool.

public class Triangle
{
    public static bool IsTriangle(int a, int b, int c)
    {
        if(a+b > c && a+c > b && b+c > a){
          return true;
        }
      return false;
    }
}

//****************Sample Test*****************
using NUnit.Framework;
using System;

[TestFixture]
public class TriangleTests
{
    [Test]
    public void IsTriangle_ValidPostiveNumbers_ReturnsTrue()
    {
        Assert.IsTrue(Triangle.IsTriangle(5, 7, 10));
    }
    
    [TestCase(1, 2, 3)]
    [TestCase(1, 3, 2)]
    [TestCase(3, 1, 2)]
    public void IsTriangle_SumOfSidesEqualOtherSide_ReturnsFalse(int a, int b, int c)
    {
        Assert.IsFalse(Triangle.IsTriangle(a, b, c));
    }

    [TestCase(-1, 2, 3)]
    [TestCase(1, -2, 3)]
    [TestCase(1, 2, -3)]
    public void IsTriangle_NegativeSides_ReturnsFalse(int a, int b, int c)
    {
        Assert.IsFalse(Triangle.IsTriangle(a, b, c));
    }
    
    [TestCase(1, 2, 4)]
    [TestCase(4, 1, 2)]
    [TestCase(1, 4, 2)]
    public void IsTriangle_PositiveSides_ReturnsFalse(int a, int b, int c)
    {
         Assert.IsFalse(Triangle.IsTriangle(a, b, c));
    }
}
