/*Challenge link: https://www.codewars.com/kata/5259b20d6021e9e14c0010d4/train/csharp
Question:
Complete the function that accepts a string parameter, and reverses each word in the string. All spaces in the string should be retained.

Examples
"This is an example!" ==> "sihT si na !elpmaxe"
"double  spaces"      ==> "elbuod  secaps"

/*

//***************Solution********************

//Split the string "str"
//Select individual words and reverse it
//Join back together as one string and retrun the result.
//Then simiplfied into one line by using an Enumerable methods.
using System;
using System.Linq;

public static class Kata
{
  public static string ReverseWords(string str) => string.Join(" ", str.Split(' ').Select(x => new String(x.Reverse().ToArray())));
  }

//****************Sample Test*****************

namespace Solution
{
  using NUnit.Framework;
  using System;
  using System.Collections.Generic;
  using System.Linq;
  using System.Text;
  
  [TestFixture]
  public class Tests
  {
    [Test]
    public void Example()
    {
      Assert.AreEqual("sihT si na !elpmaxe", Kata.ReverseWords("This is an example!"));
    }
    [Test]
    public void QuickBrownFox()
    {
      Assert.AreEqual("ehT kciuq nworb xof spmuj revo eht yzal .god", Kata.ReverseWords("The quick brown fox jumps over the lazy dog."));
    }
    [Test]
    public void OneWord()
    {
      Assert.AreEqual("elppa", Kata.ReverseWords("apple"));
    }
    [Test]
    public void DoubleSpaces()
    {
      Assert.AreEqual("elbuod  decaps  sdrow", Kata.ReverseWords("double  spaced  words"));
    }
    
    private static Random rnd = new Random();
    
    private static string solution(string str) => String.Join(" ", Enumerable.Reverse(String.Concat(Enumerable.Reverse(str.ToCharArray())).Split(' ')));
    
    [Test, Description("Random Tests (100 assertions)")]
    public void RandomTests()
    {
      const int Tests = 100;
    
      for (int i = 0; i < Tests; ++i)
      {
        StringBuilder sb = new StringBuilder(50);
        for (int j = 0; j < 50; ++j)
        {
          sb.Append((rnd.Next(0, 10) == 0) ? ' ' : (char)rnd.Next(97, 123));
        }
        string test = sb.ToString().Trim();
        
        string expected = solution(test);
        string actual = Kata.ReverseWords(test);
        Assert.AreEqual(expected, actual);
      }
    }
  }
}
