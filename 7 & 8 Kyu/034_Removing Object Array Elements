/*Challenge link:https://www.codewars.com/kata/5769b3802ae6f8e4890009d2/train/csharp
Question:
Take an array and remove every second element from the array. Always keep the first element and start removing with the next element.

Example:
["Keep", "Remove", "Keep", "Remove", "Keep", ...] --> ["Keep", "Keep", "Keep", ...]

None of the arrays will be empty, so you don't have to worry about that!

/*

//***************Solution********************

//Remove array element where 
//the modulus of 2 of the current index element(x) is equal to 0(no remainder) 
//convert into array and return the result.
//Then simiplfied into one line by using an Enumerable methods.
using System.Linq;
  public static class Kata
    {
        public static object[] RemoveEveryOther(object[] arr) => arr.Where((x,i) => i%2 == 0).ToArray();
    }

//****************Sample Test*****************
using System;
using System.Collections.Generic;
using NUnit.Framework;
using System.Linq;

  [TestFixture]
    public class KataTest
    {
        [Test]
        public void BasicTest()
        {
            Assert.AreEqual(new object[]{"Hello", "Hello Again"}, Kata.RemoveEveryOther(new object[]{"Hello", "Goodbye", "Hello Again"}));
            Assert.AreEqual(new object[] { new object[] { 1, 2 } }, Kata.RemoveEveryOther(new object[] { new object[] { 1, 2 } }));
            Assert.AreEqual(new object[] { 1, 3, 5, 7, 9 }, Kata.RemoveEveryOther(new object[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }));
            Assert.AreEqual(new object[] { new object[] { "Goodbye" } }, Kata.RemoveEveryOther(new object[] { new object[] { "Goodbye" }, new Dictionary<string,string>(){{"Great", "Job"}}}));
            Assert.AreEqual(new object[] { }, Kata.RemoveEveryOther(new object[] { }));
        }

        [Test]
        public void RandomTest([Values(1)] int a, [Random(-1, 1, 30)] double d)
        {
            RgTest rg = new RgTest((int)d * 10000);
            object[] input = rg.RandomList();
            List<object> output = new List<object>();
            for (int i = 0; i < input.Length; i++)
            {
                if (i % 2 == 0)
                {
                    output.Add(input[i]);
                }
            }
            Assert.AreEqual(output.ToArray(), Kata.RemoveEveryOther(input));
        }
    }

    public class RgTest
    {
        static Random _random;
        private static int _counter;
        public RgTest(int seed)
        {
            _counter = _counter + 1;
            _random = new Random(seed + _counter);
        }

        public object[] RandomList()
        {
            List<object> myList = new List<object>();
            int length = _random.Next(0, 500);
            for (int i = 0; i < length; i++)
            {
                myList.Add(_random.Next(0, 1000));
            }
            return myList.ToArray();
        }
    }
