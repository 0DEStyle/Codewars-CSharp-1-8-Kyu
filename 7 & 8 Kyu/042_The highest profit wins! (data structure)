/*Challenge link:https://www.codewars.com/kata/559590633066759614000063/train/csharp
Question:
Story
Ben has a very simple idea to make some profit: he buys something and sells it again. Of course, this wouldn't give him any profit at all if he was simply to buy and sell it at the same price. Instead, he's going to buy it for the lowest possible price and sell it at the highest.

Task
Write a function that returns both the minimum and maximum number of the given list/array.

Examples (Input --> Output)
[1,2,3,4,5] --> [1,5]
[2334454,5] --> [5,2334454]
[1]         --> [1,1]
Remarks
All arrays or lists will always have at least one element, so you don't need to check the length. Also, your function will always get an array or a list, you don't have to check for null, undefined or similar.



/*

//***************Solution********************

//Solution 1
using System;
using System.Collections.Generic;
using System.Linq;

//create a new list, get min and max then add it to the list
//return the result in array.
public class MinMax 
{
    public static int[] minMax(int[] lst) 
    {
      List<int> result = new List<int>();
      result.Add(lst.Min());
      result.Add(lst.Max());
      return result.ToArray();
    }
}

//Solution 2
using System.Linq;
//create a new array, get min and max then return the result.
//Then simiplfied into one line by using an Enumerable methods.
public class MinMax 
{
    public static int[] minMax(int[] lst) => new int[] {lst.Min(), lst.Max()};
}

//****************Sample Test*****************
using System;
using System.Linq;
using NUnit.Framework;

[TestFixture]
public class MinMaxTests {

[Test]
    public static void BasicTest() {
        Assert.AreEqual(new int[] {-1, 20}, MinMax.minMax(new int[] {1, 2, 5, -1, 12, 20}));
        Assert.AreEqual(new int[] {1, 5}, MinMax.minMax(new int[] {1, 2, 3, 4, 5}));
        Assert.AreEqual(new int[] {-3, 5}, MinMax.minMax(new int[] {1, 2, -3,  4,  5}));
        Assert.AreEqual(new int[] {-5, 9}, MinMax.minMax(new int[] {1, 9,  3,  4, -5}));
        Assert.AreEqual(new int[] {-214, 542}, MinMax.minMax(new int[] {4, 5, 29, 54, 4, 0, -214, 542, -64, 1, -3, 6, -6}));
        Assert.AreEqual(new int[] {4, 4}, MinMax.minMax(new int[] {4}));
    }

[Test]
    public static void RandomTestArrayOneElement() {
        Random random = new Random();
        int rn = random.Next(1, 500);
        for(int i = 0; i < 10; i++) {
            Assert.AreEqual(new int[] {rn, rn}, MinMax.minMax(new int[] {rn}));
        }
    }
    
    //-----------------------
    private static int[] comb(int k)
    {
        Random random = new Random();
        int[] res = new int[k];
        for (int i = 0; i < k; i++)
        {
            int x = random.Next(1, 10000);
            int y = random.Next(17, 29);
            int sgn = random.Next(0, 10);
            if (sgn == 0)
                x = -x;
            res[i] = x * y;
        }
        return res;
    }
    private static int[] minMaxSol(int[] lst) 
    {
        return new int[] {lst.Min(), lst.Max()};
    }
    
    //-----------------------
    
    [Test]
    public static void RandomTestBiggerArrays() {
        Random random = new Random();
        for (int i = 0; i < 100; i++) {
            int[] lst = comb(random.Next(10, 50));
            //Console.WriteLine("minMax test number: " + i);
            Assert.AreEqual(MinMaxTests.minMaxSol(lst), MinMax.minMax(lst));
        }
    }
}
