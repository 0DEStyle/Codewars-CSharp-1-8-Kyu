/*Challenge link:https://www.codewars.com/kata/576b93db1129fcf2200001e6/train/csharp
Question:
Task
Sum all the numbers of a given array ( cq. list ), except the highest and the lowest element ( by value, not by index! ).

The highest or lowest element respectively is a single element at each edge, even if there are more than one with the same value.

Mind the input validation.

Example
{ 6, 2, 1, 8, 10 } => 16
{ 1, 1, 11, 2, 3 } => 6
Input validation
If an empty value ( null, None, Nothing etc. ) is given instead of an array, or the given array is an empty list or a list with only 1 element, return 0.

/*

//***************Solution********************

using System;
using System.Linq;

public static class Kata
{
  public static int Sum(int[] numbers)
  {
    if(numbers != null){
    //Log: check elements inside array 
    Console.WriteLine(String.Join(" ",numbers));
    
    //Order from small to large and then remove first and last elements.
    numbers = numbers.OrderBy(x => x).ToArray();
    numbers = numbers.Skip(1).SkipLast(1).ToArray();
      
    /* Remove multiple min or max of the same number.
    numbers = numbers.Where(x => x != numbers.Min()).ToArray();
    numbers = numbers.Where(y => y != numbers.Max()).ToArray();
    */
    
    return numbers.Sum();
      }
    return 0;
  }
}
//****************Sample Test*****************

using System;
using System.Linq;
using NUnit.Framework;

[TestFixture]
public class SumTests
{
  private Random rand = new Random((int)DateTime.Now.Ticks);

  [Test]
  public void SumOnlyOneElement()
  {
    Assert.AreEqual(0, Kata.Sum(new[] { 6 }));
  }
  
  [Test]
  public void SumOnlyTwoElements()
  {
    Assert.AreEqual(0, Kata.Sum(new[] { 6, 7 }));
  }

  [Test]
  public void SumPositives()
  {
    Assert.AreEqual(16, Kata.Sum(new[] { 6, 2, 1, 8, 10}));
  }
  
  [Test]
  public void SumPositivesWithDoubleMax()
  {
    Assert.AreEqual(17, Kata.Sum(new[] { 6, 0, 1, 10, 10}));
  }
  
  [Test]
  public void SumNegatives()
  {
    Assert.AreEqual(-28, Kata.Sum(new[] { -6, -20, -1, -10, -12}));
  }
  
  [Test]
  public void SumMixed()
  {
    Assert.AreEqual(3, Kata.Sum(new[] { -6, 20, -1, 10, -12}));
  }
  
  [Test]
  public void SumEmptyArray()
  {
    Assert.AreEqual(0, Kata.Sum(new int[0]));
  }
  
  [Test]
  public void SumNullArray()
  {
    Assert.AreEqual(0, Kata.Sum(null));
  }
  
  
  [Test]
  public void SumRandom()
  {
    int[] numbers = new int[6];
    for(int i=0; i< numbers.Length; i++)
    {
      numbers[i] = rand.Next(-500, 600);
    }
    
    Assert.AreEqual(numbers.Sum() - numbers.Min() - numbers.Max(), Kata.Sum(numbers));
  }
}
